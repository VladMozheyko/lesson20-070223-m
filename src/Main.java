import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;

public class Main {

    /*
    План занятия
    1) Подведение итогов
    2) Введение в проф. курс
    3) Ответы на вопросы
     */

    /*
    Теория
    Условный оператор - способ указать действия в зависимости от условия(ветвление):
    if-else
    switch - case
    Цикл - возможность многократного исполнение кода:
    for()
    while
    do-while;
    Если в языке есть условные операторы и циклы, этот язык является языком программирования(алгоритмический язык
    программирования - АЯП). Циклы и условные операторы являются необходимым условие для полноты по Тьюрингу - т.е.
    на таком языке возможно выполнять любые вычисления.
    Метод - часть программы, которая имеет свои границы и выполняет конкретную задачу, чтобы вызвать метод, нужно указать
    его название.
    Антипаттерн "Божественный метод" - метод, который выполняет более одной задачи. Правило: один метод должен выполнять
    одну задачу - отсылка к принципу SOLID.
    Класс - шаблон(тип) для описания объектов какой-либо сущности. Эти описания могут иметь данные и методы(операции над данными).
    Архитектура Фон Неймана подразумевает использование данных и команд в одной форме, в одной области памяти, таким образом
    можно кодировать данные и команды не различая их для компьютера - можно в тип(класс) добавить не только данные для
    этого типа, но и операции над этим типом.
    Объект - экземпляр класса. В объекте хранятся данные и какие-либо операции над ними.
    Разница между классом и объектом:
    Объект - конкретный представитель класса.
    Пример:
    Есть класс человек, тогда читатель этого предложения является объектом этого класса, также как и автор этого предложения
    является другим объектом этого класса. Класс для них общий, а объекты они разные.
    В Java есть примитивные и ссылочные типы:
    Примитивные типов:
    byte
    short
    int
    long
    boolean
    float
    double
    char

    Ссылочные типы в отличие от примитивных типов хранит не значение переменной, а ссылку в область память(кучу), в которой
    она хранится. Как правило, переменные в Java являются ссылочными. При работе с объектами мы всегда работаем с ссылочными
    типами, т.е. в переменной объекта хранится ссылка на него.

    Три основных области память JVM:
    1) Стек         - управление программой(примитивные данные, вызовы функций и т.д.)
    2) Heap(Куча)   - Объекты
    3) Metaspace    - Классы

    Работы со строками
    В Java есть три класса для работы со строками: String, StringBuilder, StringBuffer
    Строка - набор(массив) символов - char
    String - неизменяемый класс
    StringBuilder - изменяемый класс и непотокобезопасный
    StringBuffer - изменяемый класс и потокобезопасный.

    Массив - структура данных для одного типа, которая подразумевает выделение сплошной области памяти и последовательное
    расположение элементов в этой памяти.

    В Java существуют коллекции - набор классов для реализации классических структур данных и алгоритмов, в частности существует
    класс ArrayList - класс для работы с массивом.

     */

    /*
    Заметки
       Object[] obj = new Object[5];              Создаем массив типа Object, в него возможно поместить элементы разных типов как показано ниже:
        obj[0] = 1;                               так делать не стоит во избежание ошибок при обработке массива
        obj[1] = "String";

     */

    /*
    Задачи со звездочкой
    1) Усложнить карточную игру
    1.1) Сделать возможность генерации разных колод
    1.2) Прописать полноценную механику игру(любой)
     */

    public static void main(String[] args) {
//        int[] arr = new int[10];                                            Пример низкоуровневой работы с массивом.
//
//        for (int i = 0; i < 11; i++) {
//            arr[i] = i;
//        }
//        arr[5] = 1;

        ArrayList<Integer> arrayList = new ArrayList<>();                    // Высокоуровневое создание массива.
        for (int i = 0; i < 100000; i++){
            arrayList.add(i);
            System.out.println(arrayList.get(i));
        }

        ArrayList<String> arrayList1 = new ArrayList<>();
        arrayList1.add("String");

        // Примеры коллекций

        LinkedList<Integer> linkedList = new LinkedList<>();

        HashMap<Integer, String> hashMap = new HashMap<>();

        hashMap.put(1, "Vlad");
        hashMap.put(10, "Oksana");

        System.out.println(hashMap.get(10));

        Stack<Integer> stack = new Stack<>();

    }
}
